/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class model_CredentialManager */

#ifndef _Included_model_CredentialManager
#define _Included_model_CredentialManager

#ifdef EASYRUNDLL
#undef EASYRUNDLL
#endif // EASYRUNDLL

#ifdef EASYRUNDLL_EXPORTS
#define EASYRUNDLL __declspec(dllexport)
#else
#define EASYRUNDLL __declspec(dllimport)
#endif

#ifdef __cplusplus
extern "C" {
#endif

	/**
	 * The 'rundll32.exe' (may change later) calls ElevMain, on request, to run a specific command in an elevated/administrator state.
	 * @author	Janty Azmat
	 * @param ownerWindow	the window handle (if any) that should be used as the owner window for any windows created here.
	 * @param myInstHdl		this DLL's instance handl.
	 * @param cmdLine		the passed command line (will hold 'protect' or 'unprotect' for now).
	 * @param howShow		specified how windows created here (if any) should be displayed.
	 */
	EASYRUNDLL void CALLBACK ElevMain(HWND, HINSTANCE, LPTSTR, int);

	/*
	 * Class:     model_CredentialManager
	 * Method:    unloadLibrary
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_model_CredentialManager_unloadLibrary(JNIEnv *, jclass);

	/*
	 * Class:     model_CredentialManager
	 * Method:    getCreds
	 * Signature: (Ljava/lang/String;Z)[Lmodel/CredentialManager/WindowsCredential;
	 */
	JNIEXPORT jobjectArray JNICALL Java_model_CredentialManager_getCreds(JNIEnv *, jclass, jstring, jboolean);

	/*
	 * Class:     model_CredentialManager
	 * Method:    getCred
	 * Signature: (Ljava/lang/String;I)Lmodel/CredentialManager/WindowsCredential;
	 */
	JNIEXPORT jobject JNICALL Java_model_CredentialManager_getCred(JNIEnv *, jclass, jstring, jint);

	/*
	 * Class:     model_CredentialManager
	 * Method:    saveCred
	 * Signature: (Lmodel/CredentialManager/WindowsCredential;)V
	 */
	JNIEXPORT void JNICALL Java_model_CredentialManager_saveCred(JNIEnv *, jclass, jobject);

	/*
	 * Class:     model_CredentialManager
	 * Method:    deleteCred
	 * Signature: (Ljava/lang/String;I)V
	 */
	JNIEXPORT void JNICALL Java_model_CredentialManager_deleteCred(JNIEnv *, jclass, jstring, jint);

	/*
	 * Class:     model_CredentialManager
	 * Method:    processBlo
	 * Signature: ([BZZ)[B
	 */
	JNIEXPORT jbyteArray JNICALL Java_model_CredentialManager_processBlob(JNIEnv *, jclass, jbyteArray, jboolean, jboolean);

#ifdef __cplusplus
}
#endif
#endif
